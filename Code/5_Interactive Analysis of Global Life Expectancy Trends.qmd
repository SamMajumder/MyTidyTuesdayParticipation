---
title: "Interactive Analysis of Global Life Expectancy Trends"
author: "Sambadi Majumder, PhD"
format: 
  html:
   self-contained: true
editor: visual
---

## Introduction

This TidyTuesday project dives into the global life expectancy trends, leveraging data from the 2022 United Nations World Population Prospects and other sources, as processed by Our World in Data. The datasets offer a comprehensive view of life expectancy at different ages and the gender disparity in life expectancy across various countries. This analysis aims to provide interactive visual insights into these vital global health metrics. The dataset for this week has been curated as part of a larger healthcare analytics initiative and is made accessible through the **`tidytuesday`** [GitHub repo](https://github.com/rfordatascience/tidytuesday/tree/master).

### Libraries used

-   **`tidyverse`** for data manipulation and visualization.

-   **`shiny`** for building interactive web applications.

-   **`plotly`** for creating interactive plots.

```{r}

library(tidyverse)
library(shiny)
library(plotly)

```

### Data Preparation

The data was sourced from three CSV files, encompassing overall life expectancy, life expectancy at different ages, and the life expectancy difference between females and males.

```{r}

life_expectancy <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-12-05/life_expectancy.csv')
life_expectancy_different_ages <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-12-05/life_expectancy_different_ages.csv')
life_expectancy_female_male <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-12-05/life_expectancy_female_male.csv')



# Assuming all datasets are loaded into R
combined_df <- life_expectancy %>%
  inner_join(life_expectancy_different_ages, by = c("Entity", "Code", "Year")) %>%
  inner_join(life_expectancy_female_male, by = c("Entity", "Code", "Year"))


```

### Building Shiny app

#### UI code

A user-friendly interface was designed with two main dropdowns for country and age group selection. The UI also features two tabs for distinct visualizations. 

```{r}

ui <- fluidPage(
  titlePanel("Life Expectancy Trends"),
  sidebarLayout(
    sidebarPanel(
      selectInput("countryInput", "Select Country", choices = unique(combined_df$Entity)),
      selectInput("ageGroupInput", "Select Age Group", 
                  choices = c("At Birth" = "LifeExpectancy0", 
                              "Age 10" = "LifeExpectancy10", 
                              "Age 25" = "LifeExpectancy25", 
                              "Age 45" = "LifeExpectancy45", 
                              "Age 65" = "LifeExpectancy65", 
                              "Age 80" = "LifeExpectancy80"))
    ),
    mainPanel(
      tabsetPanel(
        tabPanel("Life Expectancy by Age Group", plotlyOutput("lifeExpPlot")),
        tabPanel("Gender Disparity in Life Expectancy", plotlyOutput("lifeExpDiffPlot"))
      )
    )
  )
)


```


#### server code

The server function dynamically generates interactive plots based on user selections. 

```{r}

server <- function(input, output) {
  output$lifeExpPlot <- renderPlotly({
    filtered_data <- combined_df %>%
      filter(Entity == input$countryInput) %>%
      select(Year, input$ageGroupInput)
    
    p <- ggplot(filtered_data, aes(x = Year, 
                                   y = get(input$ageGroupInput))) +
      geom_line(color = "blue") +
      labs(x = "Year",
           y = "Life Expectancy") +
      theme_minimal()
    
    ggplotly(p)
  })
  
  output$lifeExpDiffPlot <- renderPlotly({
    filtered_data <- combined_df %>%
      filter(Entity == input$countryInput) %>%
      select(Year, LifeExpectancyDiffFM)
    
    p <- ggplot(filtered_data, aes(x = Year, 
                                   y = LifeExpectancyDiffFM)) +
      geom_line(color = "red") +
      labs(x = "Year",
           y = "Life Expectancy Difference") +
      theme_minimal()
    
    ggplotly(p)
  })
}


```

#### Shiny run  

The shinyApp function brings the UI and server components together to launch the interactive application.

```{r}

shinyApp(ui = ui, server = server)


```


